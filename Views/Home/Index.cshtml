@{
  ViewData["Title"] = "Hoofdvraag";
}


<style>
  #chart-container {
    display: inline-block;
    position: relative;
    margin: auto;
    height: 700px;
    width: 100%;
    z-index: 5;
  }

  .filter-container{
    width: 500px;
    height: auto;
    border: 1px solid black;
    border-radius: 5px;
    margin: 20px auto;
    padding: 0 20px 15px;
  }

  .chart-overlay{
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #FFFFFF;
    z-index: -10;
    text-align: center;
    font-weight: bold;
    font-size: 1.5em;
    opacity: 0;
    transition: all 0.25s ease-in-out;
  }

  .chart-overlay-active{
    z-index: 10 !important;
    opacity: 1;
    transition: opacity 0.25s ease-in-out;
  }

  #chart{
    width: 100% !important;
    height: 100% !important;
    background-color: #FFFFFF;
  }
  
  @@media screen and (max-width: 767px) {
    .filter-container{
        width: 100%;
    }
  }

  .spinner-wrapper {
    position: relative;
    width: 4em;
    height: 4em;
    border-radius: 100%;
    left: calc(50% - 2em);
    margin: 20px 0;
  }

  .spinner-wrapper::after {
    content: "";
    background: #fff;
    border-radius: 50%;
    width: 3em;
    height: 3em;
    position: absolute;
    top: 0.5em;
    left: 0.5em;
  } 

  .rotator {
    position: relative;
    width: 4em;
    border-radius: 4em;
    overflow: hidden;
    animation: rotate 2000ms infinite linear;
  }

  .rotator:before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: #f2499d;
    border: 3px solid #fff;
    border-radius: 100%;
  }

  .inner-spin {
    background: #fff;
    height: 4em;
    width: 2em;
  }

  .inner-spin {
    animation: rotate-left 2500ms infinite cubic-bezier(0.445, 0.050, 0.550, 0.950);
    border-radius: 2em 0 0 2em;
    transform-origin: 2em 2em;
  }

  .inner-spin:last-child {
    animation: rotate-right 2500ms infinite cubic-bezier(0.445, 0.050, 0.550, 0.950);
    margin-top: -4em;
    border-radius: 0 2em 2em 0;
    float: right;
    transform-origin: 0 50%;
  }

  @@keyframes rotate-left {
    60%, 75%, 100% {
        transform: rotate(360deg);
      }
  }

  @@keyframes rotate {
    0% {
        transform: rotate(0);
      }
      100% {
        transform: rotate(360deg);
      }
  }

  @@keyframes rotate-right {
    0%, 25%, 45% {
        transform: rotate(0);
      }

      100% {
        transform: rotate(360deg);
      }
  }
</style>

<h1>Op welke manier wordt de keuze van forenzen tussen de trein en de auto beïnvloed?</h1>

<div class="filter-container">
  <h3>Filters</h3>
  <p>Weer</p>
  <div class="form-check">
    <input type="checkbox" class="form-check-input" id="checkbox1" onclick="checkboxTrigger(0)">
    <label class="form-check-label" id="checkbox1Label" for="checkbox1" value="checkbox1">Warm</label>
  </div>
    <div class="form-check">
    <input type="checkbox" class="form-check-input" id="checkbox2" onclick="checkboxTrigger(1)">
    <label class="form-check-label" id="checkbox2Label" for="checkbox2" value="checkbox2">Vorst</label>
  </div>
    <div class="form-check">
    <input type="checkbox" class="form-check-input" id="checkbox3" onclick="checkboxTrigger(2)">
    <label class="form-check-label" id="checkbox3Label" for="checkbox3" value="checkbox3">Regen</label>
  </div>
</div>

<div id="chart-container">
  <div class="chart-overlay chart-overlay-active">
    <div class="spinner-wrapper">
      <div class="rotator">
        <div class="inner-spin"></div>
        <div class="inner-spin"></div>
      </div>
    </div>
    <br/>
    Crunching data...
  </div>
  <canvas id="chart"></canvas>
</div>

<script>
  function toggleOverlay() {
  console.log('Toggling class');

    var element = document.querySelector('.chart-overlay');
    element.classList.toggle('chart-overlay-active');
  }

  function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
</script>

<script>
  
  // Gets the reference to the canvas
  var ctx = document.getElementById("chart").getContext("2d");

  // Array for the checkboxes
  var checkedBoxes = [false, false, false];

  // Creating an empty chart
  var chart = new Chart(ctx,{
    type: 'bar',
    data: {},
    options: {}
  });

  // Data dataset 0
  // This dataset is the data from NS and File and will always be rendered
  var datasetArray = [{
    label: 'Normaal',
    data: [11.5, 20],
    backgroundColor: [
        'rgba(255, 99, 132, 0.2)',
        'rgba(255, 99, 132, 0.2)',
    ],
    borderColor: [
        'rgba(255,99,132,1)',
        'rgba(255,99,132,1)',
    ],
    borderWidth: 2
  }]

  var data = {
    labels: ["NS", "File"],
    datasets: datasetArray
  };

  var options = {
    // Doesn't maintain the original aspect ratio when resizing
    maintainAspectRatio: false,
    scales: {
      xAxes: [{  
        // Label X-axis     
        scaleLabel: {
            display: false,
            //labelString: ''
        },
        stacked: true
      }],
      yAxes: [{
          ticks: {
            // Y-axis starts at zero
            beginAtZero: true,
            // Maximum of the Y-axis
            //max: 5,
            // Minimum of the Y-axis
            min: 0,
            // How big the increment is
            stepSize: 2
        },
        // Label Y-axis     
        scaleLabel: {
            display: true,
            labelString: 'Tijd (uren)'
          },
        stacked: true
      }]
    },
    // Animations
    animation: {
      duration: 2000
    },
    // Padding around the chart
    layout: {
      padding: {
        left: 0,
        right: 0,
        top: 0,
        bottom: 0
      }
    }
  };

  // This function creates a new chart with the data from the checkboxes which are set on true
  async function createChart(){
    // Destroyes and re-appends the canvas element in the container
    $('#chart').remove();
    $('#chart-container').append('<canvas id="chart"><canvas>');
    canvas = document.querySelector('#chart');
    ctx = canvas.getContext('2d');
    ctx.canvas.width = $('#chart').width(); 
    ctx.canvas.height = $('#chart').height();
  
    // Set array to 1 so the base data remains
    datasetArray.length = 1;
    

    await sleep(500);
    // Dataset 1 - Push dataset 1 to the array if the checkbox is true
    if (checkedBoxes[0]){
      datasetArray.push({
        label: 'Warm',
        data: [28.5, 23],
        backgroundColor: [
          'rgba(255, 206, 86, 0.2)',
          'rgba(255, 206, 86, 0.2)',
        ],
        borderColor: [
          'rgba(255, 206, 86, 1)',
          'rgba(255, 206, 86, 1)',
        ],
        borderWidth: 2
      });
      console.log("Pushed dataset 1");
    };

    await sleep(500);
    // Dataset 2 - Push dataset 1 to the array if the checkbox is true
    if (checkedBoxes[1]){
      datasetArray.push({
        label: 'Vorst',
        data: [22, 16],
        backgroundColor: [
          'rgba(75, 192, 192, 0.2)',
          'rgba(75, 192, 192, 0.2)',
        ],
        borderColor: [
          'rgba(75, 192, 192, 1)',
          'rgba(75, 192, 192, 1)',
        ],
        borderWidth: 2
      });
      console.log("Pushed dataset 2");
    };

    await sleep(500);
    // Dataset 3 - Push dataset 1 to the array if the checkbox is true
    if (checkedBoxes[2]){
      datasetArray.push({
        label: 'Regen',
        data: [14.5, 13],
        backgroundColor: [
          'rgba(138, 180, 247, 0.2)',
          'rgba(138, 180, 247, 0.2)',
        ],
        borderColor: [
          'rgba(138,180,247,1)',
          'rgba(138,180,247,1)',
        ],
        borderWidth: 2
      });
      console.log("Pushed dataset 3");
    };
    console.log("Current array: ");
    console.log(datasetArray);

    await sleep(500);
    // Creates the new chart with the specified data
    var chart = new Chart(ctx,{
      type: 'bar',
      options: options,
      data: data
    });

    console.log("Created chart");
    console.log(chart);

    // Re-enables the checkboxes
    await sleep(500);
    document.getElementById("checkbox1").disabled = false;
    document.getElementById("checkbox2").disabled = false;
    document.getElementById("checkbox3").disabled = false;

    // Toggles the overlay so it becomes transparant again and with z-index: -10
    toggleOverlay();    
  };

  // Runs when a checkbox is checked or unchecked
  async function checkboxTrigger(i){

    // Toggle the overlay so the spinner becomes visible with z-index: 10
    toggleOverlay();

    // Disable checkboxes
    document.getElementById("checkbox1").disabled = true;
    document.getElementById("checkbox2").disabled = true;
    document.getElementById("checkbox3").disabled = true;

    console.log(checkedBoxes);

    switch(i){
      // Checkbox 1
      case 0:
        if (checkedBoxes[0]){
          // Checkbox 1 - Unchecked
          checkedBoxes[0] = false;
          console.log(checkedBoxes);
        } else {
          // Checkbox 1 - Checked
          checkedBoxes[0] = true;
          console.log(checkedBoxes);
        }
        break;
      case 1:
        if (checkedBoxes[1]){
          // Checkbox 1 - Unchecked
          checkedBoxes[1] = false;
          console.log(checkedBoxes);
        } else {
          // Checkbox 1 - Checked
          checkedBoxes[1] = true;
          console.log(checkedBoxes);
        }
        break;
      case 2:
        if (checkedBoxes[2]){
          // Checkbox 1 - Unchecked
          checkedBoxes[2] = false;
          console.log(checkedBoxes);
        } else {
          // Checkbox 1 - Checked
          checkedBoxes[2] = true;
          console.log(checkedBoxes);
        }
        break;
    }
    
    // Calls the funtion to create a new chart
    await sleep(500);
    // Destroy the old chart
    chart.destroy();
    console.log("Deleted chart");
    // Runs function create chart
    createChart();
  };

  // When the page is loaded, run createChart so the chart with the base data is rendered
  document.onload = createChart();
</script>
<p>
    Deze grafiek laat zien hoe verschillende weersscenario's de vertraging van de NS en de file beinvloeden.<br />
    We hebben gekozen om de verschillende weersscenario's te vergelijken met de normale weerssituatie.<br />
    Voor de situatie "Normaal" hebben wij een temperatuur van rond de 15 graden Celsius genomen, hierbij is er een standaard vertraging van 11,5 uur op de Ns en een vertraging van 20 uur op de snelweg.<br />
</p>